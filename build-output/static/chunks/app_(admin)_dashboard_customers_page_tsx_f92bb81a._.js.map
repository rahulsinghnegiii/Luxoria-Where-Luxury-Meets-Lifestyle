{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/e-commerce-store/app/%28admin%29/dashboard/customers/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { db } from '@/lib/firebase';\r\nimport { collection, query, orderBy, getDocs, doc, getDoc } from 'firebase/firestore';\r\nimport Link from 'next/link';\r\nimport { useAuth } from '@/lib/authContext';\r\nimport { useRouter } from 'next/navigation';\r\nimport { toast } from 'react-hot-toast';\r\n\r\ninterface Customer {\r\n  id: string;\r\n  uid: string;\r\n  email: string;\r\n  displayName: string;\r\n  photoURL?: string;\r\n  role: string;\r\n  createdAt: any;\r\n  lastLogin?: any;\r\n  orders?: number;\r\n  totalSpent?: number;\r\n}\r\n\r\nexport default function CustomersPage() {\r\n  const [customers, setCustomers] = useState<Customer[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [customersPerPage] = useState(10);\r\n  const { user, isAdmin, loading: authLoading } = useAuth();\r\n  const router = useRouter();\r\n\r\n  useEffect(() => {\r\n    if (!authLoading && (!user || !isAdmin)) {\r\n      router.push('/login?redirect=/dashboard');\r\n    }\r\n  }, [user, isAdmin, authLoading, router]);\r\n\r\n  useEffect(() => {\r\n    if (user && isAdmin) {\r\n      fetchCustomers();\r\n    }\r\n  }, [user, isAdmin]);\r\n\r\n  const fetchCustomers = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Enhanced logging to diagnose the issue\r\n      console.log(\"Auth state:\", { userId: user?.uid, email: user?.email, isAdmin });\r\n      \r\n      // Verify admin status directly from Firestore for extra safety\r\n      if (user && db) {\r\n        try {\r\n          const userRef = doc(db, 'users', user.uid);\r\n          const userDoc = await getDoc(userRef);\r\n          \r\n          if (userDoc.exists()) {\r\n            const userData = userDoc.data();\r\n            const isUserAdmin = userData.role === 'admin';\r\n            \r\n            console.log(\"Direct Firestore admin check:\", { \r\n              uid: user.uid,\r\n              firestoreRole: userData.role,\r\n              isAdmin: isUserAdmin\r\n            });\r\n            \r\n            // If the user is actually not an admin according to Firestore\r\n            if (!isUserAdmin) {\r\n              console.error(\"User is not an admin according to Firestore data\");\r\n              toast.error('Your account does not have admin privileges');\r\n              router.push('/login?redirect=/dashboard');\r\n              setLoading(false);\r\n              return;\r\n            }\r\n          } else {\r\n            console.error(\"User document doesn't exist in Firestore\");\r\n            toast.error('User profile not found');\r\n            router.push('/login');\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        } catch (adminCheckError) {\r\n          console.error(\"Error verifying admin status:\", adminCheckError);\r\n        }\r\n      }\r\n      \r\n      // Force a small delay to ensure auth state is fully processed\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Make sure the user is authenticated and an admin before making the request\r\n      if (!user) {\r\n        console.error(\"User not authenticated\");\r\n        toast.error('Please log in to access admin features');\r\n        router.push('/login?redirect=/dashboard/customers');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      if (!isAdmin) {\r\n        console.error(\"User is not an admin\");\r\n        toast.error('Admin privileges required');\r\n        router.push('/dashboard');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Try to get all users with admin privileges forced\r\n      try {\r\n        console.log(\"Attempting to fetch all users...\");\r\n      const customersRef = collection(db, 'users');\r\n      const q = query(customersRef, orderBy('createdAt', 'desc'));\r\n      const querySnapshot = await getDocs(q);\r\n        \r\n        // Log success for debugging\r\n        console.log(`Successfully fetched ${querySnapshot.size} users`);\r\n      \r\n      const customersData: Customer[] = [];\r\n      \r\n      querySnapshot.forEach((doc) => {\r\n        customersData.push({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        } as Customer);\r\n      });\r\n      \r\n      // Fetch order data to enrich customer information\r\n      try {\r\n      const ordersRef = collection(db, 'orders');\r\n      const ordersSnapshot = await getDocs(ordersRef);\r\n      \r\n      const ordersByCustomer = new Map<string, { count: number, total: number }>();\r\n      \r\n      ordersSnapshot.forEach((doc) => {\r\n        const order = doc.data();\r\n        const userId = order.userId;\r\n        \r\n        if (userId) {\r\n          const current = ordersByCustomer.get(userId) || { count: 0, total: 0 };\r\n          current.count += 1;\r\n          current.total += order.total || 0;\r\n          ordersByCustomer.set(userId, current);\r\n        }\r\n      });\r\n      \r\n      // Add order data to customers\r\n      for (const customer of customersData) {\r\n        const orderData = ordersByCustomer.get(customer.uid);\r\n        if (orderData) {\r\n          customer.orders = orderData.count;\r\n          customer.totalSpent = orderData.total;\r\n        } else {\r\n            customer.orders = 0;\r\n            customer.totalSpent = 0;\r\n          }\r\n        }\r\n      } catch (orderError) {\r\n        console.error(\"Error fetching orders data:\", orderError);\r\n        // Continue with customers but without order data\r\n        for (const customer of customersData) {\r\n          customer.orders = 0;\r\n          customer.totalSpent = 0;\r\n        }\r\n      }\r\n      \r\n      setCustomers(customersData);\r\n        toast.success(`Loaded ${customersData.length} customer records`);\r\n        \r\n    } catch (error: any) {\r\n        console.error(\"Error in main customers fetch:\", error);\r\n      \r\n        // Enhanced error handling with more specific messages\r\n      if (error.code === 'permission-denied') {\r\n          console.error(\"Permission denied error details:\", { \r\n            errorMessage: error.message,\r\n            errorCode: error.code,\r\n            userId: user?.uid,\r\n            isAdminState: isAdmin\r\n          });\r\n          toast.error('Permission denied: Unable to access user data');\r\n      } else {\r\n          toast.error(`Error: ${error.message || 'Unknown error fetching customers'}`);\r\n      }\r\n      \r\n      // Set empty customers list on error\r\n        setCustomers([]);\r\n      }\r\n    } catch (outerError) {\r\n      console.error(\"Outer error in fetchCustomers:\", outerError);\r\n      toast.error('An unexpected error occurred');\r\n      setCustomers([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Format currency\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD'\r\n    }).format(amount);\r\n  };\r\n\r\n  // Format date\r\n  const formatDate = (dateStr: any) => {\r\n    try {\r\n      if (!dateStr) return 'N/A';\r\n      \r\n      let date;\r\n      if (typeof dateStr === 'string') {\r\n        date = new Date(dateStr);\r\n      } else if (dateStr instanceof Date) {\r\n        date = dateStr;\r\n      } else {\r\n        return 'Invalid date';\r\n      }\r\n      \r\n      // Check if date is valid\r\n      if (isNaN(date.getTime())) {\r\n        return 'Invalid date';\r\n      }\r\n      \r\n      return date.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error formatting date:', error);\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  // Filter customers based on search term\r\n  const filteredCustomers = customers.filter(customer => {\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return (\r\n      customer.email?.toLowerCase().includes(searchLower) ||\r\n      customer.displayName?.toLowerCase().includes(searchLower) ||\r\n      customer.role?.toLowerCase().includes(searchLower)\r\n    );\r\n  });\r\n\r\n  // Calculate pagination\r\n  const indexOfLastCustomer = currentPage * customersPerPage;\r\n  const indexOfFirstCustomer = indexOfLastCustomer - customersPerPage;\r\n  const currentCustomers = filteredCustomers.slice(indexOfFirstCustomer, indexOfLastCustomer);\r\n  const totalPages = Math.ceil(filteredCustomers.length / customersPerPage);\r\n\r\n  // Change page\r\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900\">Customers</h1>\r\n          <p className=\"text-gray-700 mt-1\">Manage your customer accounts</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Search and Filter */}\r\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\r\n        <div className=\"relative flex-grow\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search customers...\"\r\n            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n          <div className=\"absolute left-3 top-2.5 text-gray-400\">\r\n            <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Customers Table */}\r\n      <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\r\n        <div className=\"min-w-full overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Customer\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Email\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Role\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Orders\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Total Spent\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Joined\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {currentCustomers.map((customer) => (\r\n                <tr key={customer.id}>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"flex items-center\">\r\n                      <div className=\"h-10 w-10 flex-shrink-0\">\r\n                        {customer.photoURL ? (\r\n                          <img\r\n                            className=\"h-10 w-10 rounded-full\"\r\n                            src={customer.photoURL}\r\n                            alt={customer.displayName || 'User avatar'}\r\n                          />\r\n                        ) : (\r\n                          <div className=\"h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center\">\r\n                            <span className=\"text-indigo-800 font-medium text-lg\">\r\n                              {(customer.displayName || customer.email || '?').charAt(0).toUpperCase()}\r\n                            </span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"ml-4\">\r\n                        <div className=\"text-sm font-medium text-gray-900\">\r\n                          {customer.displayName || 'No name provided'}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">\r\n                    {customer.email}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\r\n                      customer.role === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-green-100 text-green-800'\r\n                    }`}>\r\n                      {customer.role || 'user'}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">\r\n                    {customer.orders}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">\r\n                    {formatCurrency(customer.totalSpent || 0)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">\r\n                    {formatDate(customer.createdAt)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                    <button className=\"text-indigo-600 hover:text-indigo-900 mr-4\">\r\n                      View Details\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n              {currentCustomers.length === 0 && (\r\n                <tr>\r\n                  <td colSpan={7} className=\"px-6 py-4 text-center text-gray-700\">\r\n                    {searchTerm ? 'No customers match your search.' : 'No customers found.'}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      {totalPages > 1 && (\r\n        <div className=\"mt-6 flex justify-center\">\r\n          <nav className=\"flex items-center\">\r\n            <button\r\n              onClick={() => paginate(Math.max(1, currentPage - 1))}\r\n              disabled={currentPage === 1}\r\n              className=\"px-3 py-1 rounded-md mr-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:opacity-50\"\r\n            >\r\n              Previous\r\n            </button>\r\n            \r\n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\r\n              // Show 5 pages max\r\n              let pageNum;\r\n              if (totalPages <= 5) {\r\n                // If 5 or fewer pages, show all\r\n                pageNum = i + 1;\r\n              } else if (currentPage <= 3) {\r\n                // If near the start, show first 5 pages\r\n                pageNum = i + 1;\r\n              } else if (currentPage >= totalPages - 2) {\r\n                // If near the end, show last 5 pages\r\n                pageNum = totalPages - 4 + i;\r\n              } else {\r\n                // Otherwise show current page and 2 pages before and after\r\n                pageNum = currentPage - 2 + i;\r\n              }\r\n              \r\n              return (\r\n                <button\r\n                  key={pageNum}\r\n                  onClick={() => paginate(pageNum)}\r\n                  className={`px-3 py-1 rounded-md mx-1 ${\r\n                    currentPage === pageNum\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'\r\n                  }`}\r\n                >\r\n                  {pageNum}\r\n                </button>\r\n              );\r\n            })}\r\n            \r\n            <button\r\n              onClick={() => paginate(Math.min(totalPages, currentPage + 1))}\r\n              disabled={currentPage === totalPages}\r\n              className=\"px-3 py-1 rounded-md ml-2 bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 disabled:opacity-50\"\r\n            >\r\n              Next\r\n            </button>\r\n          </nav>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}