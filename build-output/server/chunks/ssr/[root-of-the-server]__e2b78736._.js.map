{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/e-commerce-store/lib/firebase.ts"],"sourcesContent":["'use client';\r\n\r\nimport { initializeApp, getApps, FirebaseApp } from 'firebase/app';\r\nimport { getFirestore, Firestore } from 'firebase/firestore';\r\nimport { getAuth, Auth } from 'firebase/auth';\r\nimport { getStorage, FirebaseStorage } from 'firebase/storage';\r\n\r\n// Function to check if the API key is potentially valid \r\n// Firebase API keys are typically formatted like AIzaSyB_Gf4aBcDeFgHiJkLmNoPqRsT_UvWxYz\r\nconst isValidApiKeyFormat = (key: string): boolean => {\r\n  // Check if it's non-empty, has no quotes/commas, and starts with \"AIza\"\r\n  if (!key || key.length < 10) return false;\r\n  if (key.includes('\"') || key.includes(',')) return false;\r\n  return key.startsWith('AIza');\r\n};\r\n\r\n// Clean the API key - explicitly strip any quotes or commas\r\nconst cleanApiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY\r\n  ? process.env.NEXT_PUBLIC_FIREBASE_API_KEY.replace(/[\",]/g, '')\r\n  : '';\r\n\r\n// Create safe instances with clearly defined types\r\nlet firebaseApp: FirebaseApp | null = null;\r\nlet db: Firestore | null = null;\r\nlet auth: Auth | null = null;\r\nlet storage: FirebaseStorage | null = null;\r\n\r\n// Only initialize Firebase on the client side\r\nif (typeof window !== 'undefined') {\r\n  try {\r\n    // Firebase configuration\r\n    const firebaseConfig = {\r\n      apiKey: cleanApiKey,\r\n      authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n      storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n      messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n      appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n      measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\r\n    };\r\n\r\n    // Only initialize once\r\n    if (!getApps().length) {\r\n      // Validate API key before initializing\r\n      if (!isValidApiKeyFormat(cleanApiKey)) {\r\n        console.warn('Firebase API key format looks invalid or missing. Some features may not work.');\r\n      }\r\n\r\n      console.log('Initializing Firebase app...');\r\n      firebaseApp = initializeApp(firebaseConfig);\r\n      \r\n      // Initialize services\r\n      db = getFirestore(firebaseApp);\r\n      auth = getAuth(firebaseApp);\r\n      storage = getStorage(firebaseApp);\r\n      \r\n      console.log('Firebase services initialized successfully');\r\n    } else {\r\n      console.log('Firebase already initialized, using existing instance');\r\n      firebaseApp = getApps()[0];\r\n      db = getFirestore(firebaseApp);\r\n      auth = getAuth(firebaseApp);\r\n      storage = getStorage(firebaseApp);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error initializing Firebase:', error);\r\n    // Keep the instances as null to indicate initialization failure\r\n  }\r\n}\r\n\r\nexport { db, auth, storage, firebaseApp as app }; "],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;AACA;AALA;;;;;AAOA,yDAAyD;AACzD,wFAAwF;AACxF,MAAM,sBAAsB,CAAC;IAC3B,wEAAwE;IACxE,IAAI,CAAC,OAAO,IAAI,MAAM,GAAG,IAAI,OAAO;IACpC,IAAI,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,OAAO;IACnD,OAAO,IAAI,UAAU,CAAC;AACxB;AAEA,4DAA4D;AAC5D,MAAM,cAAc,uCAChB,4EAAyC,OAAO,CAAC,SAAS;AAG9D,mDAAmD;AACnD,IAAI,cAAkC;AACtC,IAAI,KAAuB;AAC3B,IAAI,OAAoB;AACxB,IAAI,UAAkC;AAEtC,8CAA8C;AAC9C,uCAAmC;;AAwCnC","debugId":null}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/e-commerce-store/lib/authContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useState, useContext, useEffect, ReactNode } from 'react';\nimport { \n  onAuthStateChanged, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword,\n  signOut as firebaseSignOut,\n  User as FirebaseUser,\n  Auth,\n  updateProfile\n} from 'firebase/auth';\nimport { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport { setCookie, deleteCookie, getCookie } from 'cookies-next';\nimport { useRouter } from 'next/navigation';\nimport { auth as firebaseAuth, db } from './firebase';\n\n// Define the User type with admin flag\ninterface User extends FirebaseUser {\n  isAdmin?: boolean;\n}\n\n// Define the context type\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  isAdmin: boolean;\n  error: string | null;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, name: string) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [auth, setAuth] = useState<Auth | null>(null);\n  const router = useRouter();\n\n  // Safely initialize auth on client side only\n  useEffect(() => {\n    // Prevent execution in SSR\n    if (typeof window === 'undefined') return;\n    \n    // Assign Firebase auth to state to ensure it's only used client-side\n    if (firebaseAuth) {\n      console.log('Firebase auth initialized successfully');\n      setAuth(firebaseAuth);\n    } else {\n      console.error('Firebase auth initialization failed');\n      setError('Firebase authentication not available. Check your API key.');\n    }\n  }, []);\n\n  // Fetch user role from Firestore\n  const fetchUserRole = async (uid: string) => {\n    try {\n      if (db) {\n        const userRef = doc(db, 'users', uid);\n        const userDoc = await getDoc(userRef);\n        \n        if (userDoc.exists()) {\n          const userData = userDoc.data();\n          const userIsAdmin = userData.role === 'admin';\n          setIsAdmin(userIsAdmin);\n          \n          // Set or clear admin cookie based on role\n          if (userIsAdmin) {\n            // Check if cookie exists already to avoid unnecessary writes\n            const existingRole = getCookie('user_role');\n            if (existingRole !== 'admin') {\n              setCookie('user_role', 'admin', {\n                maxAge: 30 * 24 * 60 * 60, // 30 days\n                path: '/',\n                secure: process.env.NODE_ENV === 'production',\n                sameSite: 'strict',\n              });\n              console.log('Admin cookie set for user:', uid);\n            }\n          } else if (getCookie('user_role') === 'admin') {\n            // If user has admin cookie but is not admin in DB, remove cookie\n            deleteCookie('user_role');\n          }\n        } else {\n          console.log('No user document found, creating one');\n          // Create user document if it doesn't exist\n          const currentUser = auth?.currentUser;\n          if (currentUser) {\n            await setDoc(doc(db, 'users', currentUser.uid), {\n              uid: currentUser.uid,\n              email: currentUser.email,\n              displayName: currentUser.displayName || currentUser.email?.split('@')[0] || '',\n              photoURL: currentUser.photoURL,\n              role: 'user', // Default role\n              createdAt: serverTimestamp()\n            });\n          }\n          setIsAdmin(false);\n          // Ensure no admin cookie exists\n          if (getCookie('user_role') === 'admin') {\n            deleteCookie('user_role');\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching user role:', error);\n      setIsAdmin(false);\n    }\n  };\n\n  // Listen for auth state changes after auth is initialized\n  useEffect(() => {\n    // Skip if auth is not initialized or we're in SSR\n    if (!auth || typeof window === 'undefined') return;\n    \n    setLoading(true);\n    \n    // Listen for auth state changes\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        // User is signed in\n        try {\n          // Get the token and ensure auth_token cookie is set\n          const token = await firebaseUser.getIdToken(true);\n          setCookie('auth_token', token, {\n            maxAge: 30 * 24 * 60 * 60, // 30 days\n            path: '/',\n            secure: process.env.NODE_ENV === 'production',\n            sameSite: 'strict',\n          });\n          \n          // Set user in state\n          const enhancedUser = { ...firebaseUser, isAdmin: false } as User;\n          setUser(enhancedUser);\n          \n          // Fetch user role from Firestore and update state + cookies\n          await fetchUserRole(firebaseUser.uid);\n        } catch (error) {\n          console.error('Error in auth state change:', error);\n          // Still set the user but without admin privileges\n          const enhancedUser = { ...firebaseUser, isAdmin: false } as User;\n          setUser(enhancedUser);\n          setIsAdmin(false);\n        }\n      } else {\n        // User is signed out\n        setUser(null);\n        setIsAdmin(false);\n        \n        // Clean up cookies\n        deleteCookie('auth_token');\n        deleteCookie('user_role');\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [auth]); // Depend on auth to re-run when auth is initialized\n\n  const signIn = async (email: string, password: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n        if (!auth) {\n          throw new Error('Firebase authentication is not initialized');\n        }\n        \n      console.log('Authenticating user:', email);\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n        const firebaseUser = userCredential.user;\n        \n        // Set the user with default isAdmin value\n        const enhancedUser = { ...firebaseUser, isAdmin: false } as User;\n        setUser(enhancedUser);\n        \n        // Get the token from Firebase\n        const token = await firebaseUser.getIdToken(true);\n        \n        // Set auth cookie with the Firebase token\n        setCookie('auth_token', token, {\n          maxAge: 30 * 24 * 60 * 60, // 30 days\n          path: '/',\n          secure: process.env.NODE_ENV === 'production',\n          sameSite: 'strict',\n        });\n        \n        // Fetch user role and update isAdmin state\n        try {\n          if (db) {\n            const userRef = doc(db, 'users', firebaseUser.uid);\n            const userDoc = await getDoc(userRef);\n            \n            if (userDoc.exists()) {\n              const userData = userDoc.data();\n              const userIsAdmin = userData.role === 'admin';\n              console.log('User role fetched:', { uid: firebaseUser.uid, role: userData.role, isAdmin: userIsAdmin });\n              \n              // Update isAdmin state\n              setIsAdmin(userIsAdmin);\n              \n              // Set user role cookie if user is admin\n              if (userIsAdmin) {\n                setCookie('user_role', 'admin', {\n                  maxAge: 30 * 24 * 60 * 60, // 30 days\n                  path: '/',\n                  secure: process.env.NODE_ENV === 'production',\n                  sameSite: 'strict',\n                });\n                console.log('Admin cookie set for user:', email);\n              } else {\n                // Ensure no admin cookie exists if not admin\n                deleteCookie('user_role');\n              }\n            } else {\n              console.log('No user document found, creating one');\n              // Create user document if it doesn't exist\n              await setDoc(doc(db, 'users', firebaseUser.uid), {\n                uid: firebaseUser.uid,\n                email: firebaseUser.email,\n                displayName: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || '',\n                photoURL: firebaseUser.photoURL,\n                role: 'user', // Default role\n                createdAt: serverTimestamp()\n              });\n              \n              // Ensure no admin cookie exists\n              deleteCookie('user_role');\n            }\n          }\n        } catch (roleError) {\n          console.error('Error fetching user role:', roleError);\n          // Still keep the auth cookie even if there was an error getting the role\n          setIsAdmin(false);\n          deleteCookie('user_role');\n        }\n      \n      console.log('User successfully signed in:', email);\n    } catch (err: any) {\n      console.error('Login error:', err);\n      const errorMessage = err instanceof Error \n        ? err.message \n        : (typeof err === 'string' ? err : 'Failed to sign in');\n        \n      setError(mapAuthErrorToMessage(errorMessage));\n      setUser(null);\n      setIsAdmin(false);\n      deleteCookie('auth_token');\n      deleteCookie('user_role');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email: string, password: string, name: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      if (!auth) {\n        throw new Error('Firebase authentication is not initialized');\n      }\n      \n      // Create user with Firebase Authentication\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n        const firebaseUser = userCredential.user;\n        \n        // Update display name\n        await updateProfile(firebaseUser, {\n          displayName: name\n        });\n        \n        // Create user document in Firestore\n        await setDoc(doc(db, 'users', firebaseUser.uid), {\n          name: name,\n          email: email,\n          role: 'user',\n          createdAt: serverTimestamp(),\n          lastLogin: serverTimestamp()\n        });\n        \n        // Set the user with default isAdmin value\n        const enhancedUser = { ...firebaseUser, isAdmin: false } as User;\n        setUser(enhancedUser);\n        \n        // Set auth cookie\n        const token = await firebaseUser.getIdToken();\n      setCookie('auth_token', token, {\n          maxAge: 30 * 24 * 60 * 60, // 30 days\n          path: '/',\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        });\n      \n      console.log('User successfully registered:', email);\n    } catch (err: any) {\n      console.error('Registration error:', err);\n      setError(mapAuthErrorToMessage(err instanceof Error ? err.message : String(err)));\n      setUser(null);\n      setIsAdmin(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    if (!auth) {\n      setError('Authentication service is not available');\n      return Promise.reject(new Error('Authentication service is not available'));\n    }\n    \n    try {\n        // Sign out from Firebase\n      await firebaseSignOut(auth);\n      \n      // Clear all authentication cookies\n      deleteCookie('auth_token');\n      deleteCookie('user_role');\n      \n      // Reset user state\n      setUser(null);\n      setIsAdmin(false);\n      \n      // Redirect to home page\n      router.push('/');\n      \n      console.log('User signed out successfully');\n    } catch (err: any) {\n      console.error('Logout error:', err);\n      const errorMessage = err instanceof Error\n        ? err.message\n        : (typeof err === 'string' ? err : 'Failed to sign out');\n        \n      setError(mapAuthErrorToMessage(errorMessage));\n      throw err;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, isAdmin, error, signIn, signUp, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    console.warn('useAuth called outside of AuthProvider, using fallback implementation');\n    \n    // Return a fallback implementation\n    return {\n      user: null,\n      loading: false,\n      isAdmin: false,\n      error: null,\n      signIn: async () => { console.warn('Auth not available: signIn called outside AuthProvider'); },\n      signUp: async () => { console.warn('Auth not available: signUp called outside AuthProvider'); },\n      signOut: async () => { console.warn('Auth not available: signOut called outside AuthProvider'); }\n    };\n  }\n  \n  return context;\n}\n\n// Helper function to map Firebase error codes to user-friendly messages\nfunction mapAuthErrorToMessage(errorCode: string): string {\n  const errorMessages: Record<string, string> = {\n    'auth/email-already-in-use': 'This email is already registered.',\n    'auth/weak-password': 'Password should be at least 6 characters.',\n    'auth/user-not-found': 'Invalid email or password.',\n    'auth/wrong-password': 'Invalid email or password.',\n    'auth/invalid-email': 'Please enter a valid email address.',\n    'auth/too-many-requests': 'Too many unsuccessful login attempts. Please try again later.',\n    'auth/network-request-failed': 'Network error. Please check your connection.',\n    'auth/api-key-not-valid': 'Invalid API key. Please check your Firebase configuration.',\n  };\n\n  return errorMessages[errorCode] || `Unexpected error: ${errorCode}`;\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/e-commerce-store/lib/firebaseUtils.ts"],"sourcesContent":["import { db, auth, storage } from './firebase';\nimport {\n  collection,\n  getDocs,\n  getDoc,\n  doc,\n  query,\n  where,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  serverTimestamp,\n  orderBy,\n  limit,\n  setDoc,\n} from 'firebase/firestore';\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut as firebaseSignOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n} from 'firebase/auth';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { Product, CartItem, Order, User } from './types';\nimport { setCookie, getCookie, deleteCookie } from 'cookies-next';\n\n// Check if we're using mock services (for development)\n// Always use real Firebase unless explicitly set to use mocks\nconst shouldUseMockServices = () => {\n  // Always prioritize the environment variable setting\n  if (process.env.NEXT_PUBLIC_USE_MOCK_SERVICES === 'false') {\n    return false;\n  }\n  \n  // Fall back to mock only if auth is unavailable AND not explicitly set to false\n  const authIsUnavailable = !auth;\n  \n  if (authIsUnavailable) {\n    console.warn('Firebase auth is unavailable, falling back to mock services.');\n    return true;\n  }\n  \n  return false;\n};\n\n// Also check if we're in the browser\nconst isBrowser = typeof window !== 'undefined';\n\n// Mock user for development\nlet mockUser: FirebaseUser | null = null;\n\n// Auth functions\nexport const signUp = async (email: string, password: string) => {\n  try {\n    // Check if we should use mock services\n    if (shouldUseMockServices()) {\n      console.log('Using mock signup service');\n      \n      // Simulate authentication delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Create a mock user\n      const mockUser = {\n        uid: `mock-${Math.random().toString(36).substr(2, 9)}`,\n        email,\n        displayName: email.split('@')[0],\n      };\n      \n      // Store in localStorage to simulate persistence\n      localStorage.setItem('mockUser', JSON.stringify(mockUser));\n      \n      // Also create a corresponding user document in the mock database\n      if (!localStorage.getItem('mockDatabase')) {\n        localStorage.setItem('mockDatabase', JSON.stringify({}));\n      }\n      \n      const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n      \n      if (!mockDb.users) {\n        mockDb.users = {};\n      }\n      \n      // Create a user document with default role\n      mockDb.users[mockUser.uid] = {\n        uid: mockUser.uid,\n        email: mockUser.email,\n        displayName: mockUser.displayName,\n        role: 'user', // Default role\n        createdAt: new Date().toISOString()\n      };\n      \n      localStorage.setItem('mockDatabase', JSON.stringify(mockDb));\n      \n      setAuthCookies(mockUser);\n      return mockUser;\n    }\n    \n    // Use actual Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    // Create a document in the users collection with the user's information\n    if (user && db) {\n      try {\n        // Create a user document in Firestore\n        await setDoc(doc(db, 'users', user.uid), {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName || email.split('@')[0],\n          photoURL: user.photoURL,\n          role: 'user', // Default role\n          createdAt: serverTimestamp()\n        });\n        console.log('User document created in Firestore');\n      } catch (error) {\n        console.error('Error creating user document:', error);\n        // Consider whether to delete the auth user if Firestore creation fails\n        // This depends on your requirements for data consistency\n      }\n    }\n    \n    setAuthCookies(user);\n    return user;\n  } catch (error) {\n    console.error('Error signing up:', error);\n    throw error;\n  }\n};\n\n// Helper function to set auth cookies after successful authentication\nexport const setAuthCookies = (user: User | null) => {\n  if (!isBrowser) return;\n  \n  if (user) {\n    // Set auth token cookie (in a real app, you would use a JWT or session token)\n    setCookie('auth_token', `mock-token-${user.uid}`, {\n      maxAge: 30 * 24 * 60 * 60, // 30 days\n      path: '/',\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n    });\n\n    // Set user role cookie if the user is an admin\n    if (user.isAdmin) {\n      setCookie('user_role', 'admin', {\n        maxAge: 30 * 24 * 60 * 60, // 30 days\n        path: '/',\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n      });\n    }\n  }\n};\n\n// Helper function to remove auth cookies on sign out\nexport const clearAuthCookies = () => {\n  if (!isBrowser) return;\n  \n  deleteCookie('auth_token');\n  deleteCookie('user_role');\n};\n\n// Update the sign in function to set cookies after authentication\nexport const signIn = async (email: string, password: string) => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !auth) {\n  console.log('Mock signin with:', email);\n  mockUser = { \n    uid: 'mock-user-123',\n    email: email,\n    emailVerified: true,\n      isAdmin: email.includes('admin'),\n    } as unknown as FirebaseUser & { isAdmin: boolean };\n    \n    // Set auth cookies for the mock user\n    setAuthCookies({\n      uid: mockUser.uid,\n      email: mockUser.email || '',\n      isAdmin: email.includes('admin'),\n    });\n    \n    return { user: mockUser };\n  } else {\n    try {\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      \n      // Set auth cookies for the real user\n      const isAdmin = result.user.email?.includes('admin') || false;\n      setAuthCookies({\n        uid: result.user.uid,\n        email: result.user.email || '',\n        displayName: result.user.displayName || undefined,\n        isAdmin,\n      });\n      \n      return result;\n    } catch (error) {\n      console.error('Firebase signin error:', error);\n      // If Firebase auth fails, fall back to mock services\n      console.log('Falling back to mock signin');\n      mockUser = { \n        uid: 'mock-user-123',\n        email: email,\n        emailVerified: true,\n        isAdmin: email.includes('admin'),\n      } as unknown as FirebaseUser & { isAdmin: boolean };\n      \n      // Set auth cookies for the mock user\n      setAuthCookies({\n        uid: mockUser.uid,\n        email: mockUser.email || '',\n        isAdmin: email.includes('admin'),\n      });\n  \n  return { user: mockUser };\n    }\n  }\n};\n\n// Update the sign out function to clear cookies\nexport const signOut = async () => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !auth) {\n  console.log('Mock signout');\n    mockUser = null;\n    \n    // Clear auth cookies\n    clearAuthCookies();\n    \n    return Promise.resolve();\n  } else {\n    try {\n      // Clear auth cookies before Firebase sign out\n      clearAuthCookies();\n      \n      return await firebaseSignOut(auth);\n    } catch (error) {\n      console.error('Firebase signout error:', error);\n      // Even if Firebase sign out fails, still clear the local user\n  mockUser = null;\n  return Promise.resolve();\n    }\n  }\n};\n\nexport const getCurrentUser = (): Promise<FirebaseUser | null> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !auth) {\n  // In development, return the mock user\n  return Promise.resolve(mockUser);\n  } else {\n    try {\n      return new Promise((resolve) => {\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n          unsubscribe();\n          resolve(user);\n        });\n      });\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return Promise.resolve(mockUser);\n    }\n  }\n};\n\n// Product functions\nexport const getProducts = async (): Promise<Product[]> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n    console.warn('Using mock product data because Firebase is unavailable');\n    // Check if we have mock products in localStorage\n    try {\n      if (isBrowser) {\n        const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n        if (mockDb.products && Array.isArray(mockDb.products)) {\n          console.log(`Retrieved ${mockDb.products.length} mock products from localStorage`);\n          return mockDb.products;\n        }\n      }\n    } catch (error) {\n      console.error('Error retrieving mock products:', error);\n    }\n    return []; // Return empty array if no mock products found\n  } else {\n    try {\n      const productsCollection = collection(db, 'products');\n      const productsSnapshot = await getDocs(productsCollection);\n      const productsList = productsSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          price: data.price || 0,\n          createdAt: data.createdAt?.toDate?.() || new Date().toISOString()\n        } as Product;\n      });\n      return productsList;\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      return [];\n    }\n  }\n};\n\nexport const getProductsByCategory = async (category: string): Promise<Product[]> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n    console.warn('Using mock product category data because Firebase is unavailable');\n    // Check if we have mock products in localStorage\n    try {\n      if (isBrowser) {\n        const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n        if (mockDb.products && Array.isArray(mockDb.products)) {\n          // Filter products by category\n          const filtered = mockDb.products.filter(\n            (product: Product) => product.category === category\n          );\n          console.log(`Retrieved ${filtered.length} mock products in category ${category}`);\n          return filtered;\n        }\n      }\n    } catch (error) {\n      console.error('Error retrieving mock products by category:', error);\n    }\n    return []; // Return empty array if no mock products found\n  } else {\n    try {\n      const productsCollection = collection(db, 'products');\n      const categoryQuery = query(productsCollection, where('category', '==', category));\n      const productsSnapshot = await getDocs(categoryQuery);\n      const productsList = productsSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          price: data.price || 0,\n          createdAt: data.createdAt?.toDate?.() || new Date().toISOString()\n        } as Product;\n      });\n      return productsList;\n    } catch (error) {\n      console.error('Error fetching products by category:', error);\n      return [];\n    }\n  }\n};\n\nexport const getProductById = async (id: string): Promise<Product | null> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n    console.warn('Using mock product detail data because Firebase is unavailable');\n    // Check if we have mock products in localStorage\n    try {\n      if (isBrowser) {\n        const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n        if (mockDb.products && Array.isArray(mockDb.products)) {\n          // Find product by ID\n          const product = mockDb.products.find((p: Product) => p.id === id);\n          if (product) {\n            console.log(`Retrieved mock product with ID: ${id}`);\n            return product;\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error retrieving mock product by ID:', error);\n    }\n    console.log('No product found with ID:', id);\n    return null; // Return null if no mock product found\n  } else {\n    try {\n      const productRef = doc(db, 'products', id);\n      const productSnap = await getDoc(productRef);\n      \n      if (productSnap.exists()) {\n        const data = productSnap.data();\n        return {\n          id: productSnap.id,\n          ...data,\n          price: data.price || 0,\n          createdAt: data.createdAt?.toDate?.() || new Date().toISOString()\n        } as Product;\n      } else {\n        console.log('No product found with ID:', id);\n        return null;\n      }\n    } catch (error) {\n      console.error('Error fetching product by ID:', error);\n      return null;\n    }\n  }\n};\n\nexport const addProduct = async (product: Omit<Product, 'id' | 'createdAt'>): Promise<string> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n    // Create a mock product ID\n    const productId = `mock-product-${Date.now()}`;\n    \n    try {\n      if (isBrowser) {\n        // Get existing database or initialize a new one\n        const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n        \n        // Initialize products array if it doesn't exist\n        if (!mockDb.products) {\n          mockDb.products = [];\n        }\n        \n        // Add new product with ID and createdAt\n        const newProduct = {\n          ...product,\n          id: productId,\n          createdAt: new Date().toISOString()\n        };\n        \n        // Add to mock database\n        mockDb.products.push(newProduct);\n        \n        // Save back to localStorage\n        localStorage.setItem('mockDatabase', JSON.stringify(mockDb));\n        console.log('Adding mock product:', newProduct);\n      }\n    } catch (error) {\n      console.error('Error storing mock product:', error);\n    }\n    \n    return Promise.resolve(productId);\n  } else {\n    try {\n      const productsCollection = collection(db, 'products');\n      const docRef = await addDoc(productsCollection, {\n        ...product,\n        createdAt: serverTimestamp()\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error adding product to Firestore:', error);\n      throw error;\n    }\n  }\n};\n\nexport const updateProduct = async (id: string, product: Partial<Product>): Promise<void> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n    try {\n      if (isBrowser) {\n        // Get existing database\n        const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n        \n        // Check if products array exists\n        if (!mockDb.products || !Array.isArray(mockDb.products)) {\n          throw new Error('No products found in mock database');\n        }\n        \n        // Find product index\n        const productIndex = mockDb.products.findIndex((p: Product) => p.id === id);\n        \n        if (productIndex === -1) {\n          throw new Error(`Product with ID ${id} not found`);\n        }\n        \n        // Update product\n        mockDb.products[productIndex] = {\n          ...mockDb.products[productIndex],\n          ...product,\n          updatedAt: new Date().toISOString()\n        };\n        \n        // Save back to localStorage\n        localStorage.setItem('mockDatabase', JSON.stringify(mockDb));\n        console.log('Updating mock product:', id, product);\n      }\n    } catch (error) {\n      console.error('Error updating mock product:', error);\n    }\n    \n    return Promise.resolve();\n  } else {\n    try {\n      const productRef = doc(db, 'products', id);\n      await updateDoc(productRef, {\n        ...product,\n        updatedAt: serverTimestamp()\n      });\n    } catch (error) {\n      console.error('Error updating product in Firestore:', error);\n      throw error;\n    }\n  }\n};\n\nexport const deleteProduct = async (id: string): Promise<void> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n    try {\n      if (isBrowser) {\n        // Get existing database\n        const mockDb = JSON.parse(localStorage.getItem('mockDatabase') || '{}');\n        \n        // Check if products array exists\n        if (!mockDb.products || !Array.isArray(mockDb.products)) {\n          throw new Error('No products found in mock database');\n        }\n        \n        // Filter out the product to delete\n        mockDb.products = mockDb.products.filter((p: Product) => p.id !== id);\n        \n        // Save back to localStorage\n        localStorage.setItem('mockDatabase', JSON.stringify(mockDb));\n        console.log('Deleting mock product:', id);\n      }\n    } catch (error) {\n      console.error('Error deleting mock product:', error);\n    }\n    \n    return Promise.resolve();\n  } else {\n    try {\n      const productRef = doc(db, 'products', id);\n      await deleteDoc(productRef);\n    } catch (error) {\n      console.error('Error deleting product from Firestore:', error);\n      throw error;\n    }\n  }\n};\n\n// Orders functions\nexport const getUserOrders = async (userId: string): Promise<Order[]> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  if (USE_MOCK_SERVICES || !isBrowser || !db) {\n  // In development, return empty orders array\n  console.log('Getting mock orders for user:', userId);\n  return Promise.resolve([]);\n  } else {\n    try {\n      const ordersCollection = collection(db, 'orders');\n      const userOrdersQuery = query(\n        ordersCollection, \n        where('userId', '==', userId),\n        orderBy('createdAt', 'desc')\n      );\n      const ordersSnapshot = await getDocs(userOrdersQuery);\n      \n      const ordersList = ordersSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data,\n          createdAt: data.createdAt?.toDate?.() || new Date().toISOString()\n        } as Order;\n      });\n      \n      return ordersList;\n    } catch (error) {\n      console.error('Error fetching user orders:', error);\n      return [];\n    }\n  }\n};\n\nexport const createOrder = async (order: Omit<Order, 'id' | 'createdAt'>): Promise<string> => {\n  const USE_MOCK_SERVICES = shouldUseMockServices();\n  \n  // In development, create a mock order ID\n  console.log('Creating mock order:', order);\n  return Promise.resolve(`mock-order-${Date.now()}`);\n};\n\n// Image upload function\nexport const uploadProductImage = async (file: File): Promise<string> => {\n  // Mock service for demo/development\n  if (shouldUseMockServices()) {\n    console.log('Using mock service for image upload:', file.name);\n    \n    // Simulate delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Generate color for the SVG\n    const getRandomColor = () => {\n      const colors = [\n        '#4285F4', // Google Blue\n        '#34A853', // Google Green\n        '#FBBC05', // Google Yellow\n        '#EA4335', // Google Red\n        '#5E35B1', // Deep Purple\n        '#1E88E5', // Blue\n        '#43A047', // Green\n        '#E53935', // Red\n        '#FB8C00', // Orange\n        '#00ACC1', // Cyan\n      ];\n      return colors[Math.floor(Math.random() * colors.length)];\n    };\n    \n    // Generate a simple SVG with the filename\n    const color = getRandomColor();\n    const svgContent = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"400\" viewBox=\"0 0 600 400\">\n        <rect width=\"600\" height=\"400\" fill=\"${color}\" />\n        <text x=\"50%\" y=\"50%\" font-family=\"Arial\" font-size=\"24\" text-anchor=\"middle\" fill=\"white\">${file.name}</text>\n      </svg>\n    `;\n    \n    // Convert SVG to base64 data URL\n    const base64Image = `data:image/svg+xml;base64,${btoa(svgContent.trim())}`;\n    \n    return Promise.resolve(base64Image);\n  } else {\n    try {\n      if (!storage) {\n        throw new Error('Firebase storage is not initialized');\n      }\n      \n      // Create a reference to the file in Firebase Storage\n      // Remove special characters from filename to avoid URL encoding issues\n      const safeFileName = file.name.replace(/[#?&]/g, '_');\n      const storageRef = ref(storage, `product-images/${Date.now()}-${safeFileName}`);\n      \n      // Upload the file\n      const snapshot = await uploadBytes(storageRef, file);\n      \n      try {\n        // Get the download URL - this might fail due to CORS\n        const downloadURL = await getDownloadURL(snapshot.ref);\n        \n        // Transform the URL to ensure it's CORS-friendly\n        const transformedURL = transformFirebaseStorageUrl(downloadURL);\n        \n        // Double check that the URL has ?alt=media at the end\n        const finalURL = !transformedURL.includes('?alt=media')\n          ? (transformedURL.includes('?') \n              ? `${transformedURL}&alt=media` \n              : `${transformedURL}?alt=media`)\n          : transformedURL;\n        \n        console.log('Uploaded image URL:', finalURL);\n        return finalURL;\n      } catch (urlError) {\n        console.error('Error getting Firebase Storage download URL:', urlError);\n        throw urlError;\n      }\n    } catch (error) {\n      console.error('Error uploading image to Firebase Storage:', error);\n      \n      // Generate a fallback image with the filename\n      const fileName = file.name || 'image';\n      const svgContent = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"600\" height=\"400\" viewBox=\"0 0 600 400\">\n          <rect width=\"600\" height=\"400\" fill=\"#4285F4\" />\n          <text x=\"50%\" y=\"50%\" font-family=\"Arial\" font-size=\"24\" text-anchor=\"middle\" fill=\"white\">${fileName}</text>\n        </svg>\n      `;\n      \n      // Convert SVG to base64 data URL\n      const base64Image = `data:image/svg+xml;base64,${btoa(svgContent.trim())}`;\n      return base64Image;\n    }\n  }\n};\n\n// Function to safely transform Firebase Storage URLs\nexport const transformFirebaseStorageUrl = (url: string): string => {\n  // If it's not a Firebase Storage URL, return it unchanged\n  if (!url || typeof url !== 'string' || !url.includes('firebasestorage.googleapis.com')) {\n    return url;\n  }\n  \n  try {\n    // For Firebase Storage URLs, try to transform to a direct download URL format\n    // This is a workaround for CORS issues with the default Firebase Storage URLs\n    \n    // Check if the URL is already in the download format\n    if (url.includes('/o/') && url.includes('?alt=media')) {\n      return url; // Already in the correct format\n    }\n    \n    // Extract the path and convert to the direct download format\n    if (url.includes('/o?name=')) {\n      // Format is: https://firebasestorage.googleapis.com/v0/b/[bucket]/o?name=[path]\n      // Extract the bucket name from the URL\n      const bucketPart = url.split('/b/')[1];\n      const bucket = bucketPart.split('.')[0];\n      \n      // Extract the file path, which comes after name=\n      let path = '';\n      if (url.includes('name=')) {\n        path = url.split('name=')[1];\n        // Remove any additional query parameters if present\n        if (path.includes('&')) {\n          path = path.split('&')[0];\n        }\n      }\n      \n      // Decode the path if it's URL encoded\n      const decodedPath = decodeURIComponent(path);\n      \n      // Build direct download URL with alt=media parameter\n      return `https://firebasestorage.googleapis.com/v0/b/${bucket}/o/${encodeURIComponent(decodedPath)}?alt=media`;\n    }\n    \n    // Handle the case where the URL might be in the download format but missing alt=media\n    if (url.includes('/o/')) {\n      // Make sure the URL ends with ?alt=media\n      const urlParts = url.split('?');\n      const baseUrl = urlParts[0];\n      \n      // Parse existing query params\n      const params = new URLSearchParams(urlParts.length > 1 ? urlParts[1] : '');\n      params.set('alt', 'media');\n      \n      return `${baseUrl}?${params.toString()}`;\n    }\n    \n    // Manually handle the specific format from the error message\n    // If we have a standard firebasestorage URL structure\n    const match = url.match(/https:\\/\\/firebasestorage\\.googleapis\\.com\\/v\\d+\\/b\\/([^/]+)\\/o/);\n    if (match) {\n      const bucket = match[1].split('.')[0];\n      \n      // Try to extract the file path\n      let path = '';\n      // First try the format with 'name=' parameter\n      if (url.includes('name=')) {\n        path = url.split('name=')[1];\n        if (path.includes('&')) {\n          path = path.split('&')[0];\n        }\n      }\n      \n      // If we have a path, construct a proper download URL\n      if (path) {\n        return `https://firebasestorage.googleapis.com/v0/b/${bucket}/o/${encodeURIComponent(decodeURIComponent(path))}?alt=media`;\n      }\n    }\n  } catch (error) {\n    console.error('Error transforming Firebase Storage URL:', error, url);\n  }\n  \n  // Last resort: just append ?alt=media if not present\n  if (!url.includes('?alt=media')) {\n    return url.includes('?') ? `${url}&alt=media` : `${url}?alt=media`;\n  }\n  \n  // If anything fails, return the original URL\n  return url;\n}; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 945, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/e-commerce-store/lib/cartContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { CartItem, Product } from './types';\nimport { getCurrentUser } from './firebaseUtils';\n\ninterface CartContextType {\n  items: CartItem[];\n  addItem: (product: Product, quantity?: number) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  getTotalItems: () => number;\n  getTotalPrice: () => number;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\n// Helper function to safely access localStorage\nconst safeLocalStorage = {\n  getItem: (key: string): string | null => {\n    if (typeof window === 'undefined') return null;\n    try {\n      return localStorage.getItem(key);\n    } catch (error) {\n      console.error(`Error getting item ${key} from localStorage:`, error);\n      return null;\n    }\n  },\n  setItem: (key: string, value: string): boolean => {\n    if (typeof window === 'undefined') return false;\n    try {\n      localStorage.setItem(key, value);\n      return true;\n    } catch (error) {\n      console.error(`Error setting item ${key} in localStorage:`, error);\n      return false;\n    }\n  },\n};\n\nexport const CartProvider = ({ children }: CartProviderProps) => {\n  const [items, setItems] = useState<CartItem[]>([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load cart from localStorage on mount - client-side only\n  useEffect(() => {\n    // Use setTimeout to ensure this runs after hydration\n    const timer = setTimeout(() => {\n      try {\n        const savedCart = safeLocalStorage.getItem('cart');\n        if (savedCart) {\n          setItems(JSON.parse(savedCart));\n        }\n      } catch (error) {\n        console.error('Error loading cart from localStorage:', error);\n        setError('Failed to load your cart. Please refresh the page.');\n      } finally {\n        setIsInitialized(true);\n        setIsLoading(false);\n      }\n    }, 0);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  // Save cart to localStorage whenever it changes - client-side only\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    try {\n      safeLocalStorage.setItem('cart', JSON.stringify(items));\n    } catch (error) {\n      console.error('Error saving cart to localStorage:', error);\n      setError('Failed to save your cart. Changes may not persist.');\n    }\n  }, [items, isInitialized]);\n\n  // Sync with Firebase when user logs in\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    const syncCartWithFirebase = async () => {\n      try {\n        const user = await getCurrentUser();\n        if (user) {\n          // In a real app, you would fetch the user's cart from Firestore\n          // and merge it with the local cart\n          console.log('User logged in, syncing cart with Firebase');\n        }\n      } catch (error) {\n        console.error('Error syncing cart with Firebase:', error);\n        // Don't set an error here as it's not critical for user experience\n      }\n    };\n\n    syncCartWithFirebase();\n  }, [isInitialized]);\n\n  const addItem = (product: Product, quantity = 1) => {\n    if (!product || !product.id) {\n      console.error('Invalid product:', product);\n      setError('Failed to add item to cart: Invalid product data');\n      return;\n    }\n    \n    setItems((prevItems) => {\n      try {\n        // Check if item already exists in cart\n        const existingItem = prevItems.find((item) => item.productId === product.id);\n\n        if (existingItem) {\n          // Update quantity if item exists\n          return prevItems.map((item) =>\n            item.productId === product.id\n              ? { ...item, quantity: item.quantity + quantity }\n              : item\n          );\n        } else {\n          // Add new item if it doesn't exist\n          return [\n            ...prevItems,\n            {\n              id: Math.random().toString(36).substr(2, 9), // Generate a random ID\n              productId: product.id,\n              name: product.name,\n              price: product.price,\n              image: product.images[0],\n              quantity,\n            },\n          ];\n        }\n      } catch (error) {\n        console.error('Error adding item to cart:', error);\n        setError('Failed to add item to cart. Please try again.');\n        return prevItems;\n      }\n    });\n  };\n\n  const removeItem = (id: string) => {\n    try {\n      setItems((prevItems) => prevItems.filter((item) => item.id !== id));\n    } catch (error) {\n      console.error('Error removing item from cart:', error);\n      setError('Failed to remove item from cart. Please try again.');\n    }\n  };\n\n  const updateQuantity = (id: string, quantity: number) => {\n    try {\n      if (quantity <= 0) {\n        removeItem(id);\n        return;\n      }\n\n      setItems((prevItems) =>\n        prevItems.map((item) => (item.id === id ? { ...item, quantity } : item))\n      );\n    } catch (error) {\n      console.error('Error updating item quantity:', error);\n      setError('Failed to update item quantity. Please try again.');\n    }\n  };\n\n  const clearCart = () => {\n    try {\n      setItems([]);\n    } catch (error) {\n      console.error('Error clearing cart:', error);\n      setError('Failed to clear your cart. Please try again.');\n    }\n  };\n\n  const getTotalItems = () => {\n    try {\n      return items.reduce((total, item) => total + item.quantity, 0);\n    } catch (error) {\n      console.error('Error calculating total items:', error);\n      return 0;\n    }\n  };\n\n  const getTotalPrice = () => {\n    try {\n      return items.reduce((total, item) => total + item.price * item.quantity, 0);\n    } catch (error) {\n      console.error('Error calculating total price:', error);\n      return 0;\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        items,\n        addItem,\n        removeItem,\n        updateQuantity,\n        clearCart,\n        getTotalItems,\n        getTotalPrice,\n        isLoading,\n        error\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n\n// Safe version of useCart that doesn't throw an error if used outside a provider\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    console.warn('useCart called outside of CartProvider, using fallback implementation');\n    // Return a fallback implementation\n    return {\n      items: [],\n      addItem: () => console.warn('Cart not available'),\n      removeItem: () => console.warn('Cart not available'),\n      updateQuantity: () => console.warn('Cart not available'),\n      clearCart: () => console.warn('Cart not available'),\n      getTotalItems: () => 0,\n      getTotalPrice: () => 0,\n      isLoading: false,\n      error: null\n    };\n  }\n  return context;\n}; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1153, "column": 0}, "map": {"version":3,"sources":["file://G%3A/PORTFOLIO/e-commerce-store/components/ClientProviders.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { ReactNode, useState, useEffect } from 'react';\r\nimport React from 'react';\r\nimport { AuthProvider } from '../lib/authContext';\r\nimport { CartProvider } from '../lib/cartContext';\r\nimport { Toaster } from 'react-hot-toast';\r\n\r\nexport default function ClientProviders({ children }: { children: ReactNode }) {\r\n  const [isMounted, setIsMounted] = useState(false);\r\n\r\n  // Only render providers after component is mounted on client\r\n  useEffect(() => {\r\n    setIsMounted(true);\r\n  }, []);\r\n\r\n  // Don't render anything that uses client-side features until mounted\r\n  if (!isMounted) {\r\n    return <>{children}</>;\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary fallback={<FallbackComponent />}>\r\n      <AuthProvider>\r\n        <CartProvider>\r\n          <Toaster \r\n            position=\"top-right\"\r\n            toastOptions={{\r\n              duration: 3000,\r\n              style: {\r\n                background: '#363636',\r\n                color: '#fff',\r\n              },\r\n              success: {\r\n                duration: 3000,\r\n                style: {\r\n                  background: '#4ade80',\r\n                  color: '#fff',\r\n                },\r\n              },\r\n              error: {\r\n                duration: 4000,\r\n                style: {\r\n                  background: '#ef4444',\r\n                  color: '#fff',\r\n                },\r\n              },\r\n            }}\r\n          />\r\n          {children}\r\n        </CartProvider>\r\n      </AuthProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\n// Simple error boundary component\r\nclass ErrorBoundary extends React.Component<{\r\n  children: ReactNode;\r\n  fallback: ReactNode;\r\n}> {\r\n  state = { hasError: false, error: null };\r\n  \r\n  static getDerivedStateFromError(error: any) {\r\n    return { hasError: true, error };\r\n  }\r\n  \r\n  componentDidCatch(error: any, errorInfo: any) {\r\n    console.error(\"Error in client providers:\", error, errorInfo);\r\n  }\r\n  \r\n  render() {\r\n    if (this.state.hasError) {\r\n      return this.props.fallback;\r\n    }\r\n    \r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Fallback UI when providers fail\r\nfunction FallbackComponent() {\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 px-4\">\r\n      <div className=\"max-w-md w-full space-y-8 p-10 bg-white rounded-xl shadow-md\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">Something went wrong</h2>\r\n          <p className=\"mt-2 text-sm text-gray-600\">\r\n            There was an error initializing the app. Please refresh the page.\r\n          </p>\r\n          <button\r\n            onClick={() => window.location.reload()}\r\n            className=\"mt-4 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none\"\r\n          >\r\n            Refresh Page\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AANA;;;;;;;AAQe,SAAS,gBAAgB,EAAE,QAAQ,EAA2B;IAC3E,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,6DAA6D;IAC7D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,aAAa;IACf,GAAG,EAAE;IAEL,qEAAqE;IACrE,IAAI,CAAC,WAAW;QACd,qBAAO;sBAAG;;IACZ;IAEA,qBACE,8OAAC;QAAc,wBAAU,8OAAC;;;;;kBACxB,cAAA,8OAAC,mHAAA,CAAA,eAAY;sBACX,cAAA,8OAAC,mHAAA,CAAA,eAAY;;kCACX,8OAAC,uJAAA,CAAA,UAAO;wBACN,UAAS;wBACT,cAAc;4BACZ,UAAU;4BACV,OAAO;gCACL,YAAY;gCACZ,OAAO;4BACT;4BACA,SAAS;gCACP,UAAU;gCACV,OAAO;oCACL,YAAY;oCACZ,OAAO;gCACT;4BACF;4BACA,OAAO;gCACL,UAAU;gCACV,OAAO;oCACL,YAAY;oCACZ,OAAO;gCACT;4BACF;wBACF;;;;;;oBAED;;;;;;;;;;;;;;;;;AAKX;AAEA,kCAAkC;AAClC,MAAM,sBAAsB,qMAAA,CAAA,UAAK,CAAC,SAAS;IAIzC,QAAQ;QAAE,UAAU;QAAO,OAAO;IAAK,EAAE;IAEzC,OAAO,yBAAyB,KAAU,EAAE;QAC1C,OAAO;YAAE,UAAU;YAAM;QAAM;IACjC;IAEA,kBAAkB,KAAU,EAAE,SAAc,EAAE;QAC5C,QAAQ,KAAK,CAAC,8BAA8B,OAAO;IACrD;IAEA,SAAS;QACP,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;QAC5B;QAEA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;IAC5B;AACF;AAEA,kCAAkC;AAClC,SAAS;IACP,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAA6C;;;;;;kCAC3D,8OAAC;wBAAE,WAAU;kCAA6B;;;;;;kCAG1C,8OAAC;wBACC,SAAS,IAAM,OAAO,QAAQ,CAAC,MAAM;wBACrC,WAAU;kCACX;;;;;;;;;;;;;;;;;;;;;;AAOX","debugId":null}}]
}